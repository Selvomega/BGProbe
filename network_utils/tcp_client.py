import socket
from dataclasses import dataclass

@dataclass
class TCPClientConfiguration:
    """
    This class is used to configure the TCP client.
    """
    # the ip address of the host server
    host : str
    # the port of the host server
    port : int
    # address and port the client can bind to
    bind_val : tuple

class TCPClient:
    """
    The TCP client can be used for setting up BGP connections
    The first version generated by DeepSeek
    You must use `TCPClientConfiguration` to initialize.
    """
    def __init__(self, configuration = TCPClientConfiguration):
        self.configuration = configuration
        self.socket = None
        self.connected = False

    def start(self):
        """
        Initialize and connect the TCP client
        You can choose the ip address and port to bind to via `bind_val`
        if `bind_val` is by default set to `None`, binding will not be performed
        and the system will assign a random IP and port for the socket.
        """
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            if self.configuration.bind_val is not None:
                self.socket.bind(self.configuration.bind_val)
            self.socket.connect((self.configuration.host, self.configuration.port))
            self.connected = True
            print(f"Connected to {self.configuration.host}:{self.configuration.port}")
            return True
        except Exception as e:
            print(f"Connection failed: {e}")
            return False

    def send(self, message):
        """
        Send a message to the server
        the message must be of type `bytes`
        """
        if not self.connected:
            print("Not connected to server")
            return False
        try:
            self.socket.sendall(message)
            return True
        except Exception as e:
            print(f"Send failed: {e}")
            self.connected = False
            return False

    def receive(self, buffer_size=1024):
        """
        Receive data from the server
        """
        if not self.connected:
            print("Not connected to server")
            return None
        try:
            data = self.socket.recv(buffer_size)
            if not data:
                self.connected = False
                return None
            # return without decoding. 
            return data
        except Exception as e:
            print(f"Receive failed: {e}")
            self.connected = False
            return None

    def send_receive(self, message, buffer_size=1024):
        """
        Send a message and wait for response
        """
        if self.send(message):
            return self.receive(buffer_size)
        return None

    def end(self):
        """
        Close the connection
        """
        if self.socket:
            try:
                self.socket.close()
            except:
                pass
        self.connected = False
        self.socket = None
        print("Connection closed")

    def __del__(self):
        """
        Destructor to ensure proper cleanup
        """
        self.end()

class BGPClient(TCPClient):
    """
    The BGP client used for communicating with the remote BGP speaker. 
    """
    pass
