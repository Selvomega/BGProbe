"""
This file defines the agent observing the behavior of the routing software.
"""

from configparser import ConfigParser
import re, subprocess, os

EXA_BGP_LOG = "log/exabgp.log"

# This function is currently unused.
def parse_exabgp_config(file_path):
    """
    Parse the ExaBGP config file and return a list of dictionary of neighbors.
    Have to rewrite this function when you modify the format of the config file.
    """

    config = ConfigParser()
    
    config = {
        "neighbors": []
    }

    with open(file_path, 'r') as f:
        content = f.read()

    neighbor_blocks = re.findall(r'neighbor\s+([^\s]+)\s*\{([^}]+)\}', content, re.DOTALL)

    for neighbor_ip, block_content in neighbor_blocks:
        neighbor_config = {"neighbor": neighbor_ip.strip()}

        router_id = re.search(r'router-id\s+([^\s;]+)', block_content)
        local_address = re.search(r'local-address\s+([^\s;]+)', block_content)
        local_as = re.search(r'local-as\s+(\d+)', block_content)
        peer_as = re.search(r'peer-as\s+(\d+)', block_content)

        if router_id:
            neighbor_config["router-id"] = router_id.group(1).strip()
        if local_address:
            neighbor_config["local-address"] = local_address.group(1).strip()
        if local_as:
            neighbor_config["local-as"] = int(local_as.group(1))
        if peer_as:
            neighbor_config["peer-as"] = int(peer_as.group(1))

        config["neighbors"].append(neighbor_config)

    return config

def generate_exabgp_config(peer_ip_addr: str,
                           peer_asn: int,
                           local_ip_addr: str,
                           local_asn: int,
                           output_file: str):
    """
    Generate the ExaBGP configuration.
    """
    
    local_router_id = local_ip_addr
    config_lines = ["# Generated by ExaBGP config generator\n"]

    # Write the header part of the neighbor block
    config_lines.append(f"neighbor {peer_ip_addr} {{")
    
    # Write the basic configuration.
    config_lines.append(f"    router-id {local_router_id};")
    config_lines.append(f"    local-address {local_ip_addr};")
    config_lines.append(f"    local-as {local_asn};")
    config_lines.append(f"    peer-as {peer_asn};")

    # End the neighbor block
    config_lines.append("}\n")

    # Write into the file
    with open(output_file, "w") as f:
        f.write("\n".join(config_lines))

def start_exabgp(namespace: str,
                 ):
    """
    Start the ExaBGP client using the configuration file.
    """

    exabgp_path = subprocess.run(["which", "exabgp"], stdout=subprocess.PIPE, text=True).stdout.strip()
    site_package_path = subprocess.run(
        "pip3 show exabgp | grep Location",
        shell=True,
        stdout=subprocess.PIPE, 
        text=True
    ).stdout.split("Location:")[1].strip()

    os.system(f"sudo ip netns exec {namespace} env PYTHONPATH={site_package_path} {exabgp_path} config/exabgp.conf --debug > {EXA_BGP_LOG}")

# TODO: Let the ExaBGP start and hang
# TODO: Stop ExaBGP function
# TODO: Place the ExaBGP into the test pipeline

# start_exabgp("ns-cli2")
