"""
This file defines the agent observing the behavior of the routing software.
"""

from configparser import ConfigParser
from dataclasses import dataclass
from basic_utils.const import REPO_ROOT_PATH
import re, subprocess, os, signal, atexit

EXA_BGP_LOG = f"{REPO_ROOT_PATH}/data/exabgp.log"

# This function is currently unused.
def parse_exabgp_config(file_path):
    """
    Parse the ExaBGP config file and return a list of dictionary of neighbors.
    Have to rewrite this function when you modify the format of the config file.
    """

    config = ConfigParser()
    
    config = {
        "neighbors": []
    }

    with open(file_path, 'r') as f:
        content = f.read()

    neighbor_blocks = re.findall(r'neighbor\s+([^\s]+)\s*\{([^}]+)\}', content, re.DOTALL)

    for neighbor_ip, block_content in neighbor_blocks:
        neighbor_config = {"neighbor": neighbor_ip.strip()}

        router_id = re.search(r'router-id\s+([^\s;]+)', block_content)
        local_address = re.search(r'local-address\s+([^\s;]+)', block_content)
        local_as = re.search(r'local-as\s+(\d+)', block_content)
        peer_as = re.search(r'peer-as\s+(\d+)', block_content)

        if router_id:
            neighbor_config["router-id"] = router_id.group(1).strip()
        if local_address:
            neighbor_config["local-address"] = local_address.group(1).strip()
        if local_as:
            neighbor_config["local-as"] = int(local_as.group(1))
        if peer_as:
            neighbor_config["peer-as"] = int(peer_as.group(1))

        config["neighbors"].append(neighbor_config)

    return config

def generate_exabgp_config(peer_ip_addr: str,
                           peer_asn: int,
                           local_ip_addr: str,
                           local_asn: int,
                           output_file: str):
    """
    Generate the ExaBGP configuration.

    The generated file will be used to initilize the ExaBGP instance
    """
    
    local_router_id = local_ip_addr
    config_lines = ["# Generated by ExaBGP config generator\n"]

    # Write the header part of the neighbor block
    config_lines.append(f"neighbor {peer_ip_addr} {{")
    
    # Write the basic configuration.
    config_lines.append(f"    router-id {local_router_id};")
    config_lines.append(f"    local-address {local_ip_addr};")
    config_lines.append(f"    local-as {local_asn};")
    config_lines.append(f"    peer-as {peer_asn};")

    # End the neighbor block
    config_lines.append("}\n")

    # Write into the file
    with open(output_file, "w") as f:
        f.write("\n".join(config_lines))

@dataclass
class ExaBGPAgentConfiguration:
    """
    This class is used to configure the ExaBGP agent.
    """
    # the namespace used by the ExaBGP agent
    namespace : str

class ExaBGPAgent:
    """
    The ExaBGP agent can be used for setting up BGP connections.
    You must use `ExaBGPAgentConfiguration` to initialize.
    """
    def __init__(self, configuration : ExaBGPAgentConfiguration):
        self.configuration = configuration
        self.process = None

    def start(self):
        """
        Initialize the ExaBGP agent using the coniguration file.
        """
        exabgp_path = subprocess.run(
            "which exabgp", 
            shell=True,
            stdout=subprocess.PIPE, 
            text=True
        ).stdout.strip()

        site_package_path = subprocess.run(
            "python3 -m site --user-site",
            shell=True,
            stdout=subprocess.PIPE, 
            text=True
        ).stdout.strip()
        if site_package_path.startswith("/root"):
            # You should replace this place with your own user home
            site_package_path = site_package_path.replace("/root", "/home/xinpeilin", 1)

        os.system(f"sudo rm {EXA_BGP_LOG}")
        process = subprocess.Popen(
            f"sudo ip netns exec {self.configuration.namespace} env PYTHONPATH={site_package_path} {exabgp_path} {REPO_ROOT_PATH}/config/exabgp.conf --debug > {EXA_BGP_LOG}",
            shell=True,
            stdout=subprocess.PIPE,
            preexec_fn=os.setsid
        )
        self.process = process

    def end(self):
        """
        Shut down the ExaBGP agent.
        """
        if self.process is not None:
            os.killpg(os.getpgid(self.process.pid), signal.SIGTERM)
        self.process = None
    
    def read_log(self):
        """
        Read the content from the ExaBGP agent's log.
        """
        with open(EXA_BGP_LOG, 'r') as file:
            content = file.read()
        return content

    def clear_log(self):
        """
        Clear the content from the ExaBGP agent's log.
        """
        with open(EXA_BGP_LOG, 'w') as file:
            file.write('')
        return

    def __del__(self):
        """
        Destructor to ensure proper cleanup
        """
        os.system("sudo pkill -f exabgp")

#################### Deprecated ####################

def start_exabgp(namespace: str):
    """
    Start the ExaBGP client using the configuration file.
    """

    exabgp_path = subprocess.run(
            "which exabgp", 
            shell=True,
            stdout=subprocess.PIPE, 
            text=True
        ).stdout.strip()
    env = os.environ.copy()
    # site_package_path = subprocess.run(
    #     "python3 -m pip show exabgp | grep Location",
    #     shell=True,
    #     stdout=subprocess.PIPE, 
    #     text=True,
    #     env=env
    # ).stdout.split("Location:")[1].strip()
    site_package_path = "/home/xinpeilin/.local/lib/python3.12/site-packages"

    os.system(f"sudo rm {EXA_BGP_LOG}")
    process = subprocess.Popen(
        f"sudo ip netns exec {namespace} env PYTHONPATH={site_package_path} {exabgp_path} config/exabgp.conf --debug > {EXA_BGP_LOG}",
        shell=True,
        stdout=subprocess.PIPE,
        preexec_fn=os.setsid
    )
    atexit.register(stop_exabgp, process)

    return process

def stop_exabgp(process):
    """
    Shut down the ExaBGP instance.
    """
    os.killpg(os.getpgid(process.pid), signal.SIGTERM)

# ret = start_exabgp("ns-cli2")
# from time import sleep
# sleep(10)
# stop_exabgp(ret)
